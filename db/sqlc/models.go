// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type GiftStatus string

const (
	GiftStatusGiftPending    GiftStatus = "GiftPending"
	GiftStatusGiftPaid       GiftStatus = "GiftPaid"
	GiftStatusGiftApproved   GiftStatus = "GiftApproved"
	GiftStatusGiftCancelling GiftStatus = "GiftCancelling"
	GiftStatusGiftCancelled  GiftStatus = "GiftCancelled"
)

func (e *GiftStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GiftStatus(s)
	case string:
		*e = GiftStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for GiftStatus: %T", src)
	}
	return nil
}

type NullGiftStatus struct {
	GiftStatus GiftStatus `json:"gift_status"`
	Valid      bool       `json:"valid"` // Valid is true if GiftStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGiftStatus) Scan(value interface{}) error {
	if value == nil {
		ns.GiftStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GiftStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGiftStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GiftStatus), nil
}

type PaymentStatus string

const (
	PaymentStatusPaymentCompleted PaymentStatus = "PaymentCompleted"
	PaymentStatusPaymentCancelled PaymentStatus = "PaymentCancelled"
	PaymentStatusPaymentFailed    PaymentStatus = "PaymentFailed"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus `json:"payment_status"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type Gift struct {
	ID        uuid.UUID  `json:"id"`
	Gifter    string     `json:"gifter"`
	Recipient string     `json:"recipient"`
	Message   string     `json:"message"`
	Status    GiftStatus `json:"status"`
}

type Payment struct {
	ID     uuid.UUID     `json:"id"`
	GiftID uuid.UUID     `json:"gift_id"`
	Status PaymentStatus `json:"status"`
}
