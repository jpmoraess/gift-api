// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type GiftStatus string

const (
	GiftStatusPENDING    GiftStatus = "PENDING"
	GiftStatusPAID       GiftStatus = "PAID"
	GiftStatusAPPROVED   GiftStatus = "APPROVED"
	GiftStatusCANCELLING GiftStatus = "CANCELLING"
	GiftStatusCANCELLED  GiftStatus = "CANCELLED"
)

func (e *GiftStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GiftStatus(s)
	case string:
		*e = GiftStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for GiftStatus: %T", src)
	}
	return nil
}

type NullGiftStatus struct {
	GiftStatus GiftStatus `json:"gift_status"`
	Valid      bool       `json:"valid"` // Valid is true if GiftStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGiftStatus) Scan(value interface{}) error {
	if value == nil {
		ns.GiftStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GiftStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGiftStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GiftStatus), nil
}

type TransactionStatus string

const (
	TransactionStatusPENDING   TransactionStatus = "PENDING"
	TransactionStatusPAID      TransactionStatus = "PAID"
	TransactionStatusFAILED    TransactionStatus = "FAILED"
	TransactionStatusCANCELLED TransactionStatus = "CANCELLED"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus `json:"transaction_status"`
	Valid             bool              `json:"valid"` // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionStatus), nil
}

type File struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Extension string    `json:"extension"`
	Size      int32     `json:"size"`
	Path      string    `json:"path"`
}

type Gift struct {
	ID        uuid.UUID  `json:"id"`
	Gifter    string     `json:"gifter"`
	Recipient string     `json:"recipient"`
	Message   string     `json:"message"`
	Status    GiftStatus `json:"status"`
}

type Transaction struct {
	ID         uuid.UUID         `json:"id"`
	GiftID     uuid.UUID         `json:"gift_id"`
	ExternalID string            `json:"external_id"`
	Amount     pgtype.Numeric    `json:"amount"`
	Date       time.Time         `json:"date"`
	Status     TransactionStatus `json:"status"`
}

type User struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	Password  string    `json:"password"`
	FullName  string    `json:"full_name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}
