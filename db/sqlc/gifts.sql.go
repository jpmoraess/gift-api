// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: gifts.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getGift = `-- name: GetGift :one
SELECT id, gifter, recipient, message, status FROM gifts WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGift(ctx context.Context, id uuid.UUID) (Gift, error) {
	row := q.db.QueryRow(ctx, getGift, id)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.Gifter,
		&i.Recipient,
		&i.Message,
		&i.Status,
	)
	return i, err
}

const insertGift = `-- name: InsertGift :one
INSERT INTO gifts (id, gifter, recipient, message, status)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, gifter, recipient, message, status
`

type InsertGiftParams struct {
	ID        uuid.UUID  `json:"id"`
	Gifter    string     `json:"gifter"`
	Recipient string     `json:"recipient"`
	Message   string     `json:"message"`
	Status    GiftStatus `json:"status"`
}

func (q *Queries) InsertGift(ctx context.Context, arg InsertGiftParams) (Gift, error) {
	row := q.db.QueryRow(ctx, insertGift,
		arg.ID,
		arg.Gifter,
		arg.Recipient,
		arg.Message,
		arg.Status,
	)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.Gifter,
		&i.Recipient,
		&i.Message,
		&i.Status,
	)
	return i, err
}
