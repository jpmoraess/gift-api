// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: files.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files WHERE id = $1
`

func (q *Queries) DeleteFile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFile, id)
	return err
}

const getFile = `-- name: GetFile :one
SELECT id, name, extension, size, path FROM files WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFile(ctx context.Context, id uuid.UUID) (File, error) {
	row := q.db.QueryRow(ctx, getFile, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Extension,
		&i.Size,
		&i.Path,
	)
	return i, err
}

const insertFile = `-- name: InsertFile :one
INSERT INTO files (id, name, extension, size, path)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, extension, size, path
`

type InsertFileParams struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Extension string    `json:"extension"`
	Size      int32     `json:"size"`
	Path      string    `json:"path"`
}

func (q *Queries) InsertFile(ctx context.Context, arg InsertFileParams) (File, error) {
	row := q.db.QueryRow(ctx, insertFile,
		arg.ID,
		arg.Name,
		arg.Extension,
		arg.Size,
		arg.Path,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Extension,
		&i.Size,
		&i.Path,
	)
	return i, err
}
